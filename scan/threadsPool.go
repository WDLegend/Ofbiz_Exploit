package scan

import (
	"Ofbiz_Exploit/common"
	"Ofbiz_Exploit/exploit"
	"fmt"
	"sync"
)

type Job struct {
	id  int
	url string
}

type Result struct {
	job Job
	vul string
}

var jobs = make(chan Job, 20)
var results = make(chan Result, 20)

func worker(wg *sync.WaitGroup) {
	for job := range jobs { //结束的标志是close(jobs) 也就是任务全部分配完之后
		output := Result{job, ""}
		if exploit.CVE_2023_51467_IsVul(job.url) { //CVE_2023_51467_IsVul
			output = Result{job, "CVE_2023_51467"}
		}
		results <- output
	}
	wg.Done()
}

func createWorkerPool(numOfWorkers int) {
	var wg sync.WaitGroup
	for i := 0; i < numOfWorkers; i++ {
		wg.Add(1)
		go worker(&wg)
	}
	wg.Wait()
	close(results)
}

func allocate(noOfJobs int) {
	for i := 0; i < noOfJobs; i++ {
		url := common.URLs[i]
		job := Job{i, url}
		jobs <- job
	}
	close(jobs)
}

func result(done chan bool) {
	for result := range results { //结束的标志是close(results)
		if result.vul != "" {
			fmt.Printf("[+] target %s is vul: %s", result.job.url, result.vul)
		}
	}
	done <- true //发送后，main中的<-done停止阻塞
}
